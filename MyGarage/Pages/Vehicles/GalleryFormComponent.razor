@page "/vehicles/{VehicleId:guid}/photos/form/{PhotoId:guid?}"
@using Garage
@using MyGarage.Services

@inject ITheGarageClient TheGarageClient

<PageTitle>@ActionLabel Photo</PageTitle>

<h1>@ActionLabel Photo</h1>

@if (Photo == null)
{
        <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <form>
            <div class="form-group">
                <label for="title">Title</label>
                <input type="text" class="form-control" id="title" @bind-value="Photo.Title" />
            </div>

            <div class="form-group">
                <label for="date">Date</label>
                <input type="date" class="form-control" id="date" @bind-value="Photo.Date" />
            </div>
            
            <div class="form-group">
                <label for="description">Description</label>
                <input type="text" class="form-control" id="description" @bind-value="Photo.Description"/>
            </div>

            <div class="form-group">
                <label for="photo">Photo</label>
                
                <InputFile id="photo" OnChange="LoadFiles" />
            </div>

            <table>
                <tbody>
                <tr>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
                    </td>
                    <td>
                            <NavLink class="nav-link" href="@($"/vehicles/form/{VehicleId}")">
                            <span class="bi bi-vehicles-nav-menu" aria-hidden="true"></span> Cancel
                        </NavLink>
                    </td>
                </tr>
                </tbody>
            </table>
        </form>
    </div>
}

@code {
    [Parameter] public Guid VehicleId { get; set; }

    [Parameter] public Guid? PhotoId { get; set; }

    [SupplyParameterFromForm] private Photo? Photo { get; set; }

    private string? ActionLabel { get; set; }

    private Vehicle? _vehicle;

    protected override async Task OnInitializedAsync()
    {
        _vehicle = await TheGarageClient.GetVehicleAsync(VehicleId);
        if (PhotoId != null)
        {
            ActionLabel = "Edit";
            // Photo = await TheGarageClient.GetPhotoAsync(PhotoId.Value);
        }
        else
        {
            ActionLabel = "Add";
            Photo = new Photo();
        }

    }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file != null)
        {
            await using var stream = file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024); // Set maxAllowedSize if needed
            await TheGarageClient.StoreImageAsync(stream);
        }
    }

    private async Task Save()
    {
        
    }
}   
